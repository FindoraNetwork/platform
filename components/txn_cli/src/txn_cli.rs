#![deny(warnings)]
use clap::{App, Arg, SubCommand};
use txn_cli::txn_lib::{init_logging, match_error_and_exit, process_inputs};

/// If `process_inputs` returns an error, calls `match_error_and_exit` and exits with appropriate code.
fn main() {
  init_logging();
  let inputs = App::new("Transaction Builder")
    .version("0.0.1")
    .about("Copyright 2019 Â© Findora. All rights reserved.")
    .arg(Arg::with_name("config")
      .short("c")
      .long("config")
      .value_name("PATH/TO/FILE")
      .help("Specify a custom config file (default: \"$FINDORA_DIR/config.toml\")")
      .takes_value(true))
    .arg(Arg::with_name("dir")
      .short("d")
      .long("dir")
      .value_name("PATH")
      .help("Directory for configuaration, security, and temporary files; must be writable")
      .takes_value(true)
      .env("FINDORA_DIR"))
    .arg(Arg::with_name("txn")
      .long("txn")
      .value_name("FILE")
      .help("Use a name transaction file (will always be under findora_dir)")
      .takes_value(true))
    .subcommand(SubCommand::with_name("asset_issuer")
      .subcommand(SubCommand::with_name("sign_up")
        .arg(Arg::with_name("name")
          .short("n")
          .long("name")
          .required(true)
          .takes_value(true)
          .help("Asset issuer's name.")))
      .arg(Arg::with_name("id")
        .short("i")
        .long("id")
        .takes_value(true)
        .help("Asset issuer id."))
      .subcommand(SubCommand::with_name("store_sids")
        .arg(Arg::with_name("file")
          .short("f")
          .long("file")
          .required(true)
          .takes_value(true)
          .help("Path to store the sids."))
        .arg(Arg::with_name("indices")
          .short("i")
          .long("indices")
          .required(true)
          .takes_value(true)
          .help("Sids. Separate by comma (\",\").")))
      .subcommand(SubCommand::with_name("store_memos")
        .arg(Arg::with_name("file")
          .short("f")
          .long("file")
          .required(true)
          .takes_value(true)
          .help("Path to store the tracer and owner memos."))
        .arg(Arg::with_name("amount")
          .short("a")
          .long("amount")
          .required(true)
          .takes_value(true)
          .help("Asset amount."))
        .arg(Arg::with_name("confidential_amount")
          .short("m")
          .long("confidential_amount")
          .takes_value(false)
          .help("If specified, the amount will be confidential."))
        .arg(Arg::with_name("token_code")
          .short("t")
          .long("token_code")
          .required(true)
          .takes_value(true)
          .help("Asset token code.")))
      .subcommand(SubCommand::with_name("air_assign")
        .arg(Arg::with_name("address")
          .short("k")
          .long("address")
          .help("Required: address or key of AIR entry")
          .takes_value(true))
        .arg(Arg::with_name("data")
          .short("v")
          .long("data")
          .takes_value(true)
          .help("Required: Data to be stored. The transaction will fail if no asset with the token code exists.")))
      .subcommand(SubCommand::with_name("define_asset")
        .arg(Arg::with_name("fiat")
          .short("f")
          .long("fiat")
          .takes_value(false)
          .help("Indicate the asset is a fiat asset."))
        .arg(Arg::with_name("token_code")
          .long("token_code")
          .short("c")
          .help("Explicit 16 character token code for the new asset; must be a unique name. If specified code is already in use, transaction will fail. If not specified, will display automatically generated token code.")
          .takes_value(true))
        .arg(Arg::with_name("traceable")
          .short("trace")
          .long("traceable")
          .help("If specified, asset transfers can be traced by the issuer "))
        .arg(Arg::with_name("memo")
          .short("m")
          .long("memo")
          .required(true)
          .takes_value(true)
          .help("Memo as Json, with escaped quotation marks"))
        .arg(Arg::with_name("confidential")
          .short("xx")
          .long("confidential")
          .help("Make memo confidential"))
        .arg(Arg::with_name("with_policy")
          .short("p")
          .help("TODO: add support for policies")))
      .subcommand(SubCommand::with_name("issue_asset")
        .arg(Arg::with_name("token_code")
          .short("c")
          .long("token_code")
          .required(true)
          .takes_value(true)
          .help("Token code of the asset to be issued. The transaction will fail if no asset with the token code exists."))
        .arg(Arg::with_name("traceable")
          .short("t")
          .long("traceable")
          .help("If specified, the asset will be traceable."))
        .arg(Arg::with_name("amount")
          .short("amt")
          .long("amount")
          .required(true)
          .takes_value(true)
          .help("Amount of tokens to issue."))
        .arg(Arg::with_name("confidential_amount")
          .short("m")
          .long("confidential_amount")
          .takes_value(false)
          .help("If specified, the amount will be confidential.")))
      .subcommand(SubCommand::with_name("clear_kv")
        .arg(Arg::with_name("key")
          .short("k")
          .long("key")
          .required(true)
          .takes_value(true)
          .help("Which KV-store entry to clear"))
        .arg(Arg::with_name("gen")
          .short("g")
          .long("gen")
          .required(true)
          .takes_value(true)
          .help("Which generation of `key` this is"))
        )
      .subcommand(SubCommand::with_name("set_kv")
        .arg(Arg::with_name("key")
          .short("k")
          .long("key")
          .required(true)
          .takes_value(true)
          .help("Which KV-store entry to set"))
        .arg(Arg::with_name("gen")
          .short("g")
          .long("gen")
          .required(true)
          .takes_value(true)
          .help("Which generation of `key` this is"))
        .arg(Arg::with_name("value")
          .short("v")
          .long("value")
          .required(true)
          .takes_value(true)
          .help("What to set that entry to (base64)"))
        )
      .subcommand(SubCommand::with_name("transfer_asset")
        .arg(Arg::with_name("recipients")
          .short("r")
          .long("recipients")
          .required(true)
          .takes_value(true)
          .help("Recipients' ids. Separate by comma (\",\")."))
        .arg(Arg::with_name("sids_file")
          .short("s")
          .long("sids_file")
          .required(true)
          .takes_value(true)
          .help("Path to the input sids."))
        .arg(Arg::with_name("issuance_txn_files")
          .short("f")
          .long("issuance_txn_files")
          .required(true)
          .takes_value(true)
          .help("Paths to the asset issuance transactions."))
        .arg(Arg::with_name("traceable")
          .short("t")
          .long("traceable")
          .help("If specified, the asset will be traceable."))
        .arg(Arg::with_name("input_amounts")
          .short("iamts")
          .long("input_amounts")
          .required(true)
          .takes_value(true)
          .help("Amount to transfer from each record. Separate by comma (\",\")."))
        .arg(Arg::with_name("output_amounts")
          .short("oamts")
          .long("output_amounts")
          .required(true)
          .takes_value(true)
          .help("Amount to transfer to each account. Separate by comma (\",\").")))
      .subcommand(SubCommand::with_name("issue_and_transfer_asset")
        .arg(Arg::with_name("recipient")
          .short("r")
          .long("recipient")
          .required(true)
          .takes_value(true)
          .help("Recipient's id."))
        .arg(Arg::with_name("amount")
          .short("amt")
          .long("amount")
          .required(true)
          .takes_value(true)
          .help("Amount of tokens to issue and transfer."))
        .arg(Arg::with_name("token_code")
          .short("tc")
          .long("token_code")
          .required(true)
          .takes_value(true)
          .help("Token code of the asset."))
        .arg(Arg::with_name("confidential_amount")
          .short("m")
          .long("confidential_amount")
          .takes_value(false)
          .help("If specified, the amount will be confidential."))
        .arg(Arg::with_name("confidential_asset")
          .short("s")
          .long("confidential_asset")
          .takes_value(false)
          .help("If specified, the asset transfer will be confidential.")))
      .subcommand(SubCommand::with_name("trace_and_verify_asset")
        .arg(Arg::with_name("memo_file")
          .short("f")
          .long("memo_file")
          .required(true)
          .takes_value(true)
          .help("Path to the tracer and owner memos."))
        .arg(Arg::with_name("expected_amount")
          .short("a")
          .long("expected_amount")
          .required(true)
          .takes_value(true)
          .help("Expected asset amount to verify.")))
      .subcommand(SubCommand::with_name("trace_credential")
        .arg(Arg::with_name("memo_file")
          .short("f")
          .long("memo_file")
          .required(true)
          .takes_value(true)
          .help("Path to the tracer and owner memos."))
        .arg(Arg::with_name("attribute")
          .short("a")
          .long("attribute")
          .required(true)
          .takes_value(true)
          .possible_values(&["min_credit_score", "min_income", "citizenship"])
          .help("Credential attribute to verify."))
        .arg(Arg::with_name("expected_value")
          .short("v")
          .long("expected_value")
          .required(true)
          .takes_value(true)
          .help("Expected credential value to verify."))))
    .subcommand(SubCommand::with_name("credential_issuer")
      .subcommand(SubCommand::with_name("sign_up")
        .arg(Arg::with_name("name")
          .short("n")
          .long("name")
          .required(true)
          .takes_value(true)
          .help("Credential issuer's name.")))
      .arg(Arg::with_name("id")
        .short("i")
        .long("id")
        .takes_value(true)
        .help("Credential issuer id.")))
    .subcommand(SubCommand::with_name("lender")
      .subcommand(SubCommand::with_name("sign_up")
        .arg(Arg::with_name("name")
          .short("n")
          .long("name")
          .required(true)
          .takes_value(true)
          .help("Lender's name.")))
      .arg(Arg::with_name("id")
        .short("i")
        .long("id")
        .takes_value(true)
        .help("Lender id."))
      .subcommand(SubCommand::with_name("view_loan")
        .arg(Arg::with_name("loan")
          .short("l")
          .long("loan")
          .takes_value(true)
          .help("Display the loan with the specified id only."))
        .arg(Arg::with_name("filter")
          .short("f")
          .long("filter")
          .takes_value(true)
          .possible_values(&["requested", "fulfilled", "declined", "active", "complete"])
          .help("Display the loan with the specified status only."))
        .help("By default, display all loans of this lender."))
      .subcommand(SubCommand::with_name("fulfill_loan")
        .arg(Arg::with_name("loan")
          .short("l")
          .long("loan")
          .required(true)
          .takes_value(true)
          .help("Loan id."))
        .arg(Arg::with_name("issuer")
          .short("i")
          .long("issuer")
          .required(true)
          .takes_value(true)
          .help("Asset issuer id."))
        .arg(Arg::with_name("memo_file")
          .short("f")
          .long("memo_file")
          .takes_value(true)
          .help("If specified, will store the asset tracer memo and owner memo."))
        .arg(Arg::with_name("http")
          .long("http")
          .takes_value(false)
          .help("Specify that http, not https should be used."))
        .arg(Arg::with_name("localhost")
          .long("localhost")
          .takes_value(false)
          .help("Specify that localhost, not testnet.findora.org should be used.")))
      .subcommand(SubCommand::with_name("create_or_overwrite_requirement")
        .arg(Arg::with_name("attribute")
          .short("a")
          .long("attribute")
          .required(true)
          .takes_value(true)
          .possible_values(&["min_credit_score", "min_income", "citizenship"])
          .help("Credential attribute."))
        .arg(Arg::with_name("requirement")
          .short("r")
          .long("requirement")
          .required(true)
          .takes_value(true)
          .help("Required value of the credential record."))
        .help("Create or overwrite a credential requirement.")))
    .subcommand(SubCommand::with_name("borrower")
      .subcommand(SubCommand::with_name("sign_up")
        .arg(Arg::with_name("name")
          .short("n")
          .long("name")
          .required(true)
          .takes_value(true)
          .help("Borrower's name.")))
      .arg(Arg::with_name("id")
        .short("i")
        .long("id")
        .takes_value(true)
        .help("Borrower id."))
      .subcommand(SubCommand::with_name("load_funds")
        .arg(Arg::with_name("issuer")
          .short("i")
          .long("issuer")
          .takes_value(true)
          .help("Required: issuer id."))
        .arg(Arg::with_name("amount")
          .short("a")
          .long("amount")
          .required(true)
          .takes_value(true)
          .help("Amount to transfer to the recipient."))
        .arg(Arg::with_name("http")
          .long("http")
          .takes_value(false)
          .help("Specify that http, not https should be used."))
        .arg(Arg::with_name("localhost")
          .long("localhost")
          .takes_value(false)
          .help("Specify that localhost, not testnet.findora.org should be used.")))
      .subcommand(SubCommand::with_name("view_loan")
        .arg(Arg::with_name("loan")
          .short("l")
          .long("loan")
          .takes_value(true)
          .help("Display the loan with the specified id only."))
        .arg(Arg::with_name("filter")
          .short("f")
          .long("filter")
          .takes_value(true)
          .possible_values(&["requested", "fulfilled", "declined", "active", "complete"])
          .help("Display the loan with the specified status only."))
        .help("By default, display all loans of this borrower."))
      .subcommand(SubCommand::with_name("request_loan")
        .arg(Arg::with_name("lender")
          .short("l")
          .long("lender")
          .required(true)
          .takes_value(true)
          .help("Lender id."))
        .arg(Arg::with_name("amount")
          .short("a")
          .long("amount")
          .required(true)
          .takes_value(true)
          .help("Amount of the loan."))
        .arg(Arg::with_name("interest_per_mille")
          .short("i")
          .long("interest_per_mille")
          .required(true)
          .takes_value(true)
          .help("Interest per mille. The interest rate will be interest_per_mille/1000."))
        .arg(Arg::with_name("duration")
          .short("d")
          .long("duration")
          .required(true)
          .takes_value(true)
          .help("Payment duration")))
      .subcommand(SubCommand::with_name("pay_loan")
        .arg(Arg::with_name("loan")
          .short("l")
          .long("loan")
          .required(true)
          .takes_value(true)
          .help("Loan id."))
        .arg(Arg::with_name("amount")
          .short("a")
          .long("amount")
          .required(true)
          .takes_value(true)
          .help("Payment amount."))
        .arg(Arg::with_name("http")
          .long("http")
          .takes_value(false)
          .help("Specify that http, not https should be used."))
        .arg(Arg::with_name("localhost")
          .long("localhost")
          .takes_value(false)
          .help("Specify that localhost, not testnet.findora.org should be used.")))
      .subcommand(SubCommand::with_name("view_credential")
        .arg(Arg::with_name("attribute")
          .short("a")
          .long("attribute")
          .takes_value(true)
          .possible_values(&["min_credit_score", "min_income", "citizenship"])
          .help("Display the specified credential attribute only."))
        .help("By default, display all credentials of this borrower."))
      .subcommand(SubCommand::with_name("create_or_overwrite_credential")
        .arg(Arg::with_name("credential_issuer")
          .short("c")
          .long("credential_issuer")
          .required(true)
          .takes_value(true)
          .help("Credential issuer id."))
        .arg(Arg::with_name("attribute")
          .short("a")
          .long("attribute")
          .required(true)
          .takes_value(true)
          .possible_values(&["min_credit_score", "min_income", "citizenship"])
          .help("Credential attribute."))
        .arg(Arg::with_name("value")
          .short("v")
          .long("value")
          .required(true)
          .takes_value(true)
          .help("Value of the credential record."))
        .help("Create or overwrite a credential record."))
      .subcommand(SubCommand::with_name("get_asset_record")
        .arg(Arg::with_name("sid")
          .long("sid")
          .short("s")
          .takes_value(true)
          .help("Asset sid."))
        .arg(Arg::with_name("memo_file")
          .short("f")
          .long("memo_file")
          .required(true)
          .takes_value(true)
          .help("Path to the tracer and owner memos."))
        .arg(Arg::with_name("http")
          .long("http")
          .takes_value(false)
          .help("Specify that http, not https should be used."))
        .arg(Arg::with_name("localhost")
          .long("localhost")
          .takes_value(false)
          .help("Specify that localhost, not testnet.findora.org should be used."))))
    .subcommand(SubCommand::with_name("create_txn_builder")
      .about("By default, will rename previous file with a .<number> suffix")
      .arg(Arg::with_name("name")
        .short("n")
        .long("name")
        .value_name("FILE")
        .help("Specify a name for newly created transaction file")
        .takes_value(true))
      .arg(Arg::with_name("overwrite")
        .long("force")
        .alias("overwrite")
        .short("f")
        .help("If specified, the existing file with the same name will be overwritten.")))
    .subcommand(SubCommand::with_name("serialize"))
    .subcommand(SubCommand::with_name("drop"))
    .subcommand(SubCommand::with_name("submit")
      .arg(Arg::with_name("get_sids")
        .long("get_sids")
        .short("g")
        .takes_value(false)
        .help("If specified, will query the utxo sids."))
      .arg(Arg::with_name("sids_file")
        .long("sids_file")
        .short("s")
        .takes_value(true)
        .help("If specified, will store the utxo sids to the file."))
      .arg(Arg::with_name("http")
        .long("http")
        .takes_value(false)
        .help("Specify that http, not https should be used."))
      .arg(Arg::with_name("localhost")
        .long("localhost")
        .takes_value(false)
        .help("Specify that localhost, not testnet.findora.org should be used.")))
    .get_matches();
  if let Err(error) = process_inputs(inputs) {
    match_error_and_exit(error);
  }
}
