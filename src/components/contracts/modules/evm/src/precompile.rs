use crate::runtime::stack::FindoraStackState;
use ethereum_types::H160;
use evm::{
    executor::stack::{PrecompileFailure, PrecompileHandle, PrecompileOutput},
    // Context,
    ExitError,
    ExitSucceed,
};
use impl_trait_for_tuples::impl_for_tuples;

pub use fp_core::context::Context as FinState;

pub type PrecompileResult = Result<PrecompileOutput, PrecompileFailure>;

/// Custom precompiles to be used by EVM engine.
pub trait PrecompileSet {
    /// Try to execute the code address as precompile. If the code address is not
    /// a precompile or the precompile is not yet available, return `None`.
    /// Otherwise, calculate the amount of gas needed with given `input` and
    /// `target_gas`. Return `Some(Ok(status, output, gas_used))` if the execution
    /// is successful. Otherwise return `Some(Err(_))`.
    fn execute<T>(
        handle: &mut impl PrecompileHandle,
        state: &mut FindoraStackState<'_, '_, '_, T>,
    ) -> Option<PrecompileResult>;
}

/// One single precompile used by EVM engine.
pub trait Precompile {
    /// Try to execute the precompile. Calculate the amount of gas needed with given `input` and
    /// `target_gas`. Return `Ok(status, output, gas_used)` if the execution is
    /// successful. Otherwise return `Err(_)`.
    fn execute(handle: &mut impl PrecompileHandle, state: &FinState)
        -> PrecompileResult;
}

/// precompile contract address is generated by PrecompileId.
///
/// eg. H160::from_low_u64_be(contract_id())
pub trait PrecompileId {
    /// Return the precompiled contract id.
    fn contract_id() -> u64;
}

#[impl_for_tuples(16)]
#[tuple_types_no_default_trait_bound]
impl PrecompileSet for Tuple {
    for_tuples!( where #( Tuple: Precompile + PrecompileId )* );

    fn execute<T>(
        handle: &mut impl PrecompileHandle,
        state: &mut FindoraStackState<'_, '_, '_, T>,
    ) -> Option<PrecompileResult> {
        for_tuples!( #(
            if handle.code_address() == H160::from_low_u64_be(Tuple::contract_id()) {
                return Some(Tuple::execute(handle, state.ctx))
            }
        )* );

        None
    }
}

pub trait LinearCostPrecompile {
    const BASE: u64;
    const WORD: u64;

    fn execute(
        input: &[u8],
        cost: u64,
    ) -> core::result::Result<(ExitSucceed, Vec<u8>), PrecompileFailure>;
}

impl<T: LinearCostPrecompile> Precompile for T {
    fn execute(
        handle: &mut impl PrecompileHandle,
        _state: &FinState,
    ) -> PrecompileResult {
        let target_gas = handle.gas_limit();
        let cost = ensure_linear_cost(
            target_gas,
            handle.input().len() as u64,
            T::BASE,
            T::WORD,
        )?;

        handle.record_cost(cost)?;
        let (exit_status, output) = T::execute(handle.input(), cost)?;
        Ok(PrecompileOutput {
            exit_status,
            output,
        })
    }
}

/// Linear gas cost
fn ensure_linear_cost(
    target_gas: Option<u64>,
    len: u64,
    base: u64,
    word: u64,
) -> Result<u64, PrecompileFailure> {
    let cost = base
        .checked_add(word.checked_mul(len.saturating_add(31) / 32).ok_or(
            PrecompileFailure::Error {
                exit_status: ExitError::OutOfGas,
            },
        )?)
        .ok_or(PrecompileFailure::Error {
            exit_status: ExitError::OutOfGas,
        })?;

    if let Some(target_gas) = target_gas {
        if cost > target_gas {
            return Err(PrecompileFailure::Error {
                exit_status: ExitError::OutOfGas,
            });
        }
    }

    Ok(cost)
}
