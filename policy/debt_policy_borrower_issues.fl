bound_asset_type debt {} issued_by borrower;

// Ben defines a loan L
// Ben issues himself debt tokens for L
//
// Lenny and Ben run `start_loan` with L as `the_debt`
//
// Ben repays Lenny through `repay_loan`.


// global_params are given at policy instantiation time

global_param interest_rate: Fraction
  { interest_rate > 0.0; interest_rate < 1.0; };
global_param fiat: ResourceType;
global_param loan_amount: Amount;

txn setup_loan(out resource the_debt: debt)
  ensures the_debt.owner == borrower;
  ensures the_debt.amount == loan_amount;
{
  require_signature borrower;
  assert the_debt.owner == borrower;
  issue loan_amount of debt -> the_debt;
}

txn start_loan(in    resource the_debt:  debt,
               out   resource the_iou:   debt,
               out   resource the_money: fiat,
               in    resource money_src: fiat,
)
  requires money_src.amount >= the_debt.amount;
  requires the_debt.owner == borrower;
  ensures the_iou.amount == old(the_debt.amount);
  ensures the_iou.amount == the_money.amount;
{
  local lender = money_src.owner;

  require_signature borrower;
  require_signature lender;

  assert the_iou.owner  == lender;

  transfer the_debt.amount of money_src -> the_money;
  transfer ALL of the_debt              -> the_iou;
}


txn repay_loan(inout resource the_debt:    debt,
               in    resource payment_src: fiat,
               out   resource payment_dst: fiat,
)
  ensures the_debt.amount <= old(the_debt.amount);
{
  assert payment_dst.owner == the_debt.owner;

  // TODO: time?
  local interest_amt = round(the_debt.amount * interest_rate);
  assert payment_src.amount >= interest_amt;

  local burn_amt: Amount = payment_src.amount - interest_amt;

  transfer burn_amt  of the_debt -> BURN_ADDRESS;
  transfer ALL of the_debt -> the_debt;
  transfer ALL of payment_src -> payment_dst;
}


