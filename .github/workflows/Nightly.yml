name: Nightly
on:
  push:
    branches:
      - nightly-build
# on:
#   schedule:
#     - cron: '18 * * * *'
env:
  CARGO_TERM_COLOR: always
jobs:
  build:
    strategy:
      matrix:
        platform: [scalable]
    runs-on: ${{ matrix.platform }}
    env:
      ENV: dev
      PRIVATE_ECR_URL: 358484141435.dkr.ecr.us-west-2.amazonaws.com
      PUBLIC_ECR_URL: public.ecr.aws/k6m5b6e2

    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt
        ref: nightly-build




    # - name: check fmt
    #   shell: bash
    #   run: |
    #     cargo fmt -- --check
    # - name: test_status
    #   env:
    #     DBG: true
    #   shell: bash
    #   run: |
    #     curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    #     make test_status

    # remove the test code in develop build
    # run tests
    # - name: lint
    #   shell: bash
    #   run: |
    #     make lint

    # - name: test
    #   shell: bash
    #   run: |
    #     make test

    # - name: evm test
    #   shell: bash
    #   run: |
    #     make evmtest
        
    - name: Prepare key
      shell: bash
      run: |
        tar -C ~/.ssh -zcf key.tar.gz ./
        
    - name: Clean garbage containers and images
      shell: bash
      run: |
        docker rm $(docker ps -a | grep -v "^CONTAINER" | awk '{print $1}') || true
        docker rmi -f $(docker images -f "dangling=true" -q) || true
    - name: Build rust base image
      shell: bash
      run: |
        make ci_build_binary_rust_base
    - name: Build binary image
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
        ENV: ${{ env.ENV }}
      shell: bash
      run: |
        COMMIT_HASH=$(echo ${GITHUB_CONTEXT} | jq '.event.pull_request.head.sha')
        if [ "${COMMIT_HASH}" == "null" ]; then
          export COMMIT_HASH="${GITHUB_SHA}"
        else
          export COMMIT_HASH=${COMMIT_HASH}
        fi
        export BRANCH="${GITHUB_HEAD_REF}"
        export TOBRANCH="nightly"
        export IMAGE_TAG="${TOBRANCH}-${COMMIT_HASH}"
        export VERGEN_SHA_EXTERN="${IMAGE_TAG}"
        echo "Image tag: ${IMAGE_TAG}"
        make ci_build_dev_binary_image
    - name: Build findorad images
      env:
        PRIVATE_ECR_URL: ${{ env.PRIVATE_ECR_URL }}
        PUBLIC_ECR_URL: ${{ env.PUBLIC_ECR_URL }}
        ENV: ${{ env.ENV }}
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      shell: bash
      run: |
        COMMIT_HASH=$(echo ${GITHUB_CONTEXT} | jq '.event.pull_request.head.sha')
        if [ "${COMMIT_HASH}" == "null" ]; then
          export COMMIT_HASH="${GITHUB_SHA}"
        else
          export COMMIT_HASH=${COMMIT_HASH}
        fi
        export BRANCH="${GITHUB_HEAD_REF}"
        export TOBRANCH="nightly"
        export IMAGE_TAG="${TOBRANCH}-${COMMIT_HASH}"
        echo "Image tag: ${IMAGE_TAG}"
        make ci_build_image
    - name: Login ECR
      env:
        PUBLIC_ECR_URL: ${{ env.PUBLIC_ECR_URL }}
      shell: bash
      run: |
        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${PUBLIC_ECR_URL}
        
    - name: Push images
      env:
        PRIVATE_ECR_URL: ${{ env.PRIVATE_ECR_URL }}
        PUBLIC_ECR_URL: ${{ env.PUBLIC_ECR_URL }}
        ENV: ${{ env.ENV }}
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      shell: bash
      run: |
        COMMIT_HASH=$(echo ${GITHUB_CONTEXT} | jq '.event.pull_request.head.sha')
        if [ "${COMMIT_HASH}" == "null" ]; then
          export COMMIT_HASH="${GITHUB_SHA}"
        else
          export COMMIT_HASH=${COMMIT_HASH}
        fi
        export BRANCH="${GITHUB_HEAD_REF}"
        export TOBRANCH="nightly"
        export IMAGE_TAG="${TOBRANCH}-${COMMIT_HASH}"
        echo "Image tag: ${IMAGE_TAG}"
        make ci_push_image


    # - name: Slack Notification if FAIL
    #   uses: rtCamp/action-slack-notify@v2
    #   if: failure()
    #   env:
    #     SLACK_CHANNEL: engineering-v2
    #     SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
    #     SLACK_ICON: https://findora.org/wp-content/uploads/2022/06/Group.svg
    #     SLACK_MESSAGE: 'Click the action URL to see the detail. It may cause the test fail or image build error!'
    #     SLACK_TITLE: Nightly Build ${{ job.status }}
    #     SLACK_USERNAME: Nightly Build Monitoring
    #     SLACK_WEBHOOK: ${{ secrets.SLACK_APP_WEBHOOK }}