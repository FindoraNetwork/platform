name: Feature
on:
  push:
    branches:
      - add-wasm-back
env:
  CARGO_TERM_COLOR: always
jobs:
  build:
    strategy:
      matrix:
        platform: [scalable]
    runs-on: ${{ matrix.platform }}
    env:
      ENV: dev
      PRIVATE_ECR_URL: 358484141435.dkr.ecr.us-west-2.amazonaws.com
      PUBLIC_ECR_URL: public.ecr.aws/k6m5b6e2
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt

    - name: Prepare key
      shell: bash
      run: |
        tar -C ~/.ssh -zcf key.tar.gz ./
        
    # - name: Clean garbage containers and images
    #   shell: bash
    #   run: |
    #     docker rm $(docker ps -a | grep -v "^CONTAINER" | awk '{print $1}') || true
    #     docker rmi -f $(docker images -f "dangling=true" -q) || true
    # - name: Build rust base image
    #   shell: bash
    #   run: |
    #     make ci_build_binary_rust_base
    # - name: Build binary image
    #   env:
    #     GITHUB_CONTEXT: ${{ toJSON(github) }}
    #     ENV: ${{ env.ENV }}
    #   shell: bash
    #   run: |
    #     COMMIT_HASH=$(echo ${GITHUB_CONTEXT} | jq '.event.pull_request.head.sha')
    #     if [ "${COMMIT_HASH}" == "null" ]; then
    #       export COMMIT_HASH="${GITHUB_SHA}"
    #     else
    #       export COMMIT_HASH=${COMMIT_HASH}
    #     fi
    #     export BRANCH="${GITHUB_HEAD_REF}"
    #     export TOBRANCH="${{ env.ENV }}"
    #     export IMAGE_TAG="${TOBRANCH}-${COMMIT_HASH}"
    #     export VERGEN_SHA_EXTERN="${IMAGE_TAG}"
    #     echo "Image tag: ${IMAGE_TAG}"
    #     make ci_build_dev_binary_image
    # - name: Build findorad images
    #   env:
    #     PRIVATE_ECR_URL: ${{ env.PRIVATE_ECR_URL }}
    #     PUBLIC_ECR_URL: ${{ env.PUBLIC_ECR_URL }}
    #     ENV: ${{ env.ENV }}
    #     GITHUB_CONTEXT: ${{ toJSON(github) }}
    #   shell: bash
    #   run: |
    #     COMMIT_HASH=$(echo ${GITHUB_CONTEXT} | jq '.event.pull_request.head.sha')
    #     if [ "${COMMIT_HASH}" == "null" ]; then
    #       export COMMIT_HASH="${GITHUB_SHA}"
    #     else
    #       export COMMIT_HASH=${COMMIT_HASH}
    #     fi
    #     export BRANCH="${GITHUB_HEAD_REF}"
    #     export TOBRANCH="${{ env.ENV }}"
    #     export IMAGE_TAG="${TOBRANCH}-${COMMIT_HASH}"
    #     echo "Image tag: ${IMAGE_TAG}"
    #     make ci_build_image
    # - name: Login ECR
    #   env:
    #     PUBLIC_ECR_URL: ${{ env.PUBLIC_ECR_URL }}
    #   shell: bash
    #   run: |
    #     aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${PUBLIC_ECR_URL}
        
    # - name: Push images
    #   env:
    #     PRIVATE_ECR_URL: ${{ env.PRIVATE_ECR_URL }}
    #     PUBLIC_ECR_URL: ${{ env.PUBLIC_ECR_URL }}
    #     ENV: ${{ env.ENV }}
    #     GITHUB_CONTEXT: ${{ toJSON(github) }}
    #   shell: bash
    #   run: |
    #     COMMIT_HASH=$(echo ${GITHUB_CONTEXT} | jq '.event.pull_request.head.sha')
    #     if [ "${COMMIT_HASH}" == "null" ]; then
    #       export COMMIT_HASH="${GITHUB_SHA}"
    #     else
    #       export COMMIT_HASH=${COMMIT_HASH}
    #     fi
    #     export BRANCH="${GITHUB_HEAD_REF}"
    #     export TOBRANCH="${{ env.ENV }}"
    #     export IMAGE_TAG="${TOBRANCH}-${COMMIT_HASH}"
    #     echo "Image tag: ${IMAGE_TAG}"
    #     make ci_push_image



    - name: Push wasm-js-bindings
      shell: bash
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: |
        COMMIT_HASH=$(echo ${GITHUB_CONTEXT} | jq '.event.pull_request.head.sha')
        if [ "${COMMIT_HASH}" == "null" ]; then
          export COMMIT_HASH="${GITHUB_SHA}"
        else
          export COMMIT_HASH=${COMMIT_HASH}
        fi
        export BRANCH="${GITHUB_HEAD_REF}"
        export TOBRANCH="${{ env.ENV }}"
        export BRANCH_NAME="develop"
        export WASM_DIR="/tmp/wasm-js-bindings"
        if [ ! -d "${WASM_DIR}" ]; then git clone git@github.com:FindoraNetwork/wasm-js-bindings.git "${WASM_DIR}"; fi
        pushd "${WASM_DIR}"
        git checkout "${BRANCH_NAME}" || git checkout -b "${BRANCH_NAME}"
        git pull origin "${BRANCH_NAME}" || true
        if [ ! -d "${WASM_DIR}/nodejs" ]; then mkdir "${WASM_DIR}/nodejs"; fi
        if [ ! -d "${WASM_DIR}/web" ]; then mkdir "${WASM_DIR}/web"; fi
        if [ ! -d "${WASM_DIR}/bundler" ]; then mkdir "${WASM_DIR}/bundler"; fi
        popd
        pushd src/components/wasm
        wasm-pack build --target nodejs --out-dir "${WASM_DIR}/nodejs"
        rm "${WASM_DIR}/nodejs/.gitignore"
        wasm-pack build --target web --out-dir "${WASM_DIR}/web"
        rm "${WASM_DIR}/web/.gitignore"
        wasm-pack build --target bundler --out-dir "${WASM_DIR}/bundler"
        rm "${WASM_DIR}/bundler/.gitignore"
        popd
        pushd "${WASM_DIR}"
        if [ "$(git diff)" != "" ]; then
            git add .
            git commit -m "From platform PR ${PR}(${BRANCH} to ${TOBRANCH}), commit hash: ${COMMIT_HASH}, build date: $(date +"%Y%m%d")"
            git push -f origin "${BRANCH_NAME}"
        fi
        git tag -f "${TOBRANCH}-${COMMIT_HASH}"
        git push -f origin "${TOBRANCH}-${COMMIT_HASH}"
        git tag -d "${TOBRANCH}-${COMMIT_HASH}"
        popd
