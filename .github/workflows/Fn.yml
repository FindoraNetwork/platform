name: FN
on:
  push:
    # tags:
    #   - '*-fn'
    branches:
      - "add-fn-build"
env:
  CARGO_TERM_COLOR: always
jobs:
  build:
    strategy:
      matrix:
        platform: [scalable]
    runs-on: ${{ matrix.platform }}
    env:
      ENV: dev
      PRIVATE_ECR_URL: 358484141435.dkr.ecr.us-west-2.amazonaws.com
      PUBLIC_ECR_URL: public.ecr.aws/k6m5b6e2
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt
        
    - name: Prepare key
      shell: bash
      run: |
        tar -C ~/.ssh -zcf key.tar.gz ./
        
    - name: Build fn for Linux 
      shell: bash
      run: |
        make build_musl_fn_linux

    # - name: Build fn for Macos 
    #   shell: bash
    #   run: |
    #     make build_musl_fn_macos

    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: true
        title: "test-release"
        files: |
          fn






    # - name: Build rust base image
    #   shell: bash
    #   run: |
    #     make ci_build_binary_rust_base
    # - name: Build binary image
    #   env:
    #     GITHUB_CONTEXT: ${{ toJSON(github) }}
    #   shell: bash
    #   run: |
    #     COMMIT_HASH=$(echo ${GITHUB_CONTEXT} | jq '.event.pull_request.head.sha')
    #     if [ "${COMMIT_HASH}" == "null" ]; then
    #       export COMMIT_HASH="${GITHUB_SHA}"
    #     else
    #       export COMMIT_HASH=${COMMIT_HASH}
    #     fi
    #     export BRANCH="${GITHUB_HEAD_REF}"
    #     export TOBRANCH="${GITHUB_BASE_REF}"
    #     export IMAGE_TAG="${TOBRANCH}-${COMMIT_HASH}"
    #     export VERGEN_SHA_EXTERN="${IMAGE_TAG}"
    #     echo "Image tag: ${IMAGE_TAG}"
    #     make ci_build_dev_binary_image
    # - name: Build findorad images
    #   env:
    #     PRIVATE_ECR_URL: ${{ env.PRIVATE_ECR_URL }}
    #     PUBLIC_ECR_URL: ${{ env.PUBLIC_ECR_URL }}
    #     ENV: ${{ env.ENV }}
    #     GITHUB_CONTEXT: ${{ toJSON(github) }}
    #   shell: bash
    #   run: |
    #     COMMIT_HASH=$(echo ${GITHUB_CONTEXT} | jq '.event.pull_request.head.sha')
    #     if [ "${COMMIT_HASH}" == "null" ]; then
    #       export COMMIT_HASH="${GITHUB_SHA}"
    #     else
    #       export COMMIT_HASH=${COMMIT_HASH}
    #     fi
    #     export BRANCH="${GITHUB_HEAD_REF}"
    #     export TOBRANCH="${GITHUB_BASE_REF}"
    #     export IMAGE_TAG="${TOBRANCH}-${COMMIT_HASH}"
    #     echo "Image tag: ${IMAGE_TAG}"
    #     make ci_build_image
    # - name: Login ECR
    #   env:
    #     PUBLIC_ECR_URL: ${{ env.PUBLIC_ECR_URL }}
    #   shell: bash
    #   run: |
    #     aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${PUBLIC_ECR_URL}
        
    # - name: Push images
    #   env:
    #     PRIVATE_ECR_URL: ${{ env.PRIVATE_ECR_URL }}
    #     PUBLIC_ECR_URL: ${{ env.PUBLIC_ECR_URL }}
    #     ENV: ${{ env.ENV }}
    #     GITHUB_CONTEXT: ${{ toJSON(github) }}
    #   shell: bash
    #   run: |
    #     COMMIT_HASH=$(echo ${GITHUB_CONTEXT} | jq '.event.pull_request.head.sha')
    #     if [ "${COMMIT_HASH}" == "null" ]; then
    #       export COMMIT_HASH="${GITHUB_SHA}"
    #     else
    #       export COMMIT_HASH=${COMMIT_HASH}
    #     fi
    #     export BRANCH="${GITHUB_HEAD_REF}"
    #     export TOBRANCH="${GITHUB_BASE_REF}"
    #     export IMAGE_TAG="${TOBRANCH}-${COMMIT_HASH}"
    #     echo "Image tag: ${IMAGE_TAG}"
    #     make ci_push_image
    # - name: Clean images
    #   env:
    #     PRIVATE_ECR_URL: ${{ env.PRIVATE_ECR_URL }}
    #     PUBLIC_ECR_URL: ${{ env.PUBLIC_ECR_URL }}
    #     ENV: ${{ env.ENV }}
    #     GITHUB_CONTEXT: ${{ toJSON(github) }}
    #   shell: bash
    #   run: |
    #     COMMIT_HASH=$(echo ${GITHUB_CONTEXT} | jq '.event.pull_request.head.sha')
    #     if [ "${COMMIT_HASH}" == "null" ]; then
    #       export COMMIT_HASH="${GITHUB_SHA}"
    #     else
    #       export COMMIT_HASH=${COMMIT_HASH}
    #     fi
    #     export BRANCH="${GITHUB_HEAD_REF}"
    #     export TOBRANCH="${GITHUB_BASE_REF}"
    #     export IMAGE_TAG="${TOBRANCH}-${COMMIT_HASH}"
    #     echo "Image tag: ${IMAGE_TAG}"
    #     make clean_image
    # - name: Clean binary images
    #   shell: bash
    #   env:
    #     GITHUB_CONTEXT: ${{ toJSON(github) }}
    #   run: |
    #     COMMIT_HASH=$(echo ${GITHUB_CONTEXT} | jq '.event.pull_request.head.sha')
    #     if [ "${COMMIT_HASH}" == "null" ]; then
    #       export COMMIT_HASH="${GITHUB_SHA}"
    #     else
    #       export COMMIT_HASH=${COMMIT_HASH}
    #     fi
    #     export BRANCH="${GITHUB_HEAD_REF}"
    #     export TOBRANCH="${GITHUB_BASE_REF}"
    #     export IMAGE_TAG="${TOBRANCH}-${COMMIT_HASH}"
    #     echo "Image tag: ${IMAGE_TAG}"
    #     make clean_binary_dockerhub
    # - name: Clean garbage
    #   shell: bash
    #   run: |
    #     rm -rf /tmp/*>/dev/null 2>&1 || true
