name: Develop
on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
env:
  CARGO_TERM_COLOR: always
jobs:
  build:
    strategy:
      matrix:
        platform: [scalable]
    runs-on: ${{ matrix.platform }}
    env:
      ENV: dev
      PRIVATE_ECR_URL: 358484141435.dkr.ecr.us-west-2.amazonaws.com
      PUBLIC_ECR_URL: public.ecr.aws/k6m5b6e2
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt
    # - name: check fmt
    #   shell: bash
    #   run: |
    #     cargo fmt -- --check
    # - name: test_status
    #   env:
    #     DBG: true
    #   shell: bash
    #   run: |
    #     curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    #     make test_status
    ## It need to install protobuf-compiler for build environment.
    ## Enable this when build by container.
    # - name: Install protobuf-compiler
    #   shell: bash
    #   run: |
    #     apt install protobuf-compiler
    # - name: install rustwasm
    #   shell: bash
    #   run: |
    #     curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    # - name: add go
    #   shell: bash
    #   run: |
    #     mkdir $(pwd)/opt && cd $(pwd)/opt && wget https://golang.google.cn/dl/go1.15.7.linux-amd64.tar.gz && tar -xpf go1.15.7.linux-amd64.tar.gz && echo "$(pwd)/go/bin" >> $GITHUB_PATH

    # remove the test code in develop build
    # run tests
    # - name: lint
    #   shell: bash
    #   run: |
    #     make lint

    # - name: test
    #   shell: bash
    #   run: |
    #     make test

    # - name: evm test
    #   shell: bash
    #   run: |
    #     make evmtest
        
    - name: Prepare key
      shell: bash
      run: |
        tar -C ~/.ssh -zcf key.tar.gz ./
        
    - name: Clean garbage containers and images
      shell: bash
      run: |
        docker rm $(docker ps -a | grep -v "^CONTAINER" | awk '{print $1}') || true
        docker rmi -f $(docker images -f "dangling=true" -q) || true
    - name: Build rust base image
      shell: bash
      run: |
        make ci_build_binary_rust_base
    - name: Build binary image
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
        ENV: ${{ env.ENV }}
      shell: bash
      run: |
        COMMIT_HASH=$(echo ${GITHUB_CONTEXT} | jq '.event.pull_request.head.sha')
        if [ "${COMMIT_HASH}" == "null" ]; then
          export COMMIT_HASH="${GITHUB_SHA}"
        else
          export COMMIT_HASH=${COMMIT_HASH}
        fi
        export BRANCH="${GITHUB_HEAD_REF}"
        export TOBRANCH="dev"
        export IMAGE_TAG="${TOBRANCH}-${COMMIT_HASH}"
        export VERGEN_SHA_EXTERN="${IMAGE_TAG}"
        echo "Image tag: ${IMAGE_TAG}"
        make ci_build_dev_binary_image
    - name: Build findorad images
      env:
        PRIVATE_ECR_URL: ${{ env.PRIVATE_ECR_URL }}
        PUBLIC_ECR_URL: ${{ env.PUBLIC_ECR_URL }}
        ENV: ${{ env.ENV }}
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      shell: bash
      run: |
        COMMIT_HASH=$(echo ${GITHUB_CONTEXT} | jq '.event.pull_request.head.sha')
        if [ "${COMMIT_HASH}" == "null" ]; then
          export COMMIT_HASH="${GITHUB_SHA}"
        else
          export COMMIT_HASH=${COMMIT_HASH}
        fi
        export BRANCH="${GITHUB_HEAD_REF}"
        export TOBRANCH="dev"
        export IMAGE_TAG="${TOBRANCH}-${COMMIT_HASH}"
        echo "Image tag: ${IMAGE_TAG}"
        make ci_build_image
    - name: Login ECR
      env:
        PUBLIC_ECR_URL: ${{ env.PUBLIC_ECR_URL }}
      shell: bash
      run: |
        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${PUBLIC_ECR_URL}
        
    - name: Push images
      env:
        PRIVATE_ECR_URL: ${{ env.PRIVATE_ECR_URL }}
        PUBLIC_ECR_URL: ${{ env.PUBLIC_ECR_URL }}
        ENV: ${{ env.ENV }}
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      shell: bash
      run: |
        COMMIT_HASH=$(echo ${GITHUB_CONTEXT} | jq '.event.pull_request.head.sha')
        if [ "${COMMIT_HASH}" == "null" ]; then
          export COMMIT_HASH="${GITHUB_SHA}"
        else
          export COMMIT_HASH=${COMMIT_HASH}
        fi
        export BRANCH="${GITHUB_HEAD_REF}"
        export TOBRANCH="dev"
        export IMAGE_TAG="${TOBRANCH}-${COMMIT_HASH}"
        echo "Image tag: ${IMAGE_TAG}"
        make ci_push_image
    # - name: Clean images
    #   env:
    #     PRIVATE_ECR_URL: ${{ env.PRIVATE_ECR_URL }}
    #     PUBLIC_ECR_URL: ${{ env.PUBLIC_ECR_URL }}
    #     ENV: ${{ env.ENV }}
    #     GITHUB_CONTEXT: ${{ toJSON(github) }}
    #   shell: bash
    #   run: |
    #     COMMIT_HASH=$(echo ${GITHUB_CONTEXT} | jq '.event.pull_request.head.sha')
    #     if [ "${COMMIT_HASH}" == "null" ]; then
    #       export COMMIT_HASH="${GITHUB_SHA}"
    #     else
    #       export COMMIT_HASH=${COMMIT_HASH}
    #     fi
    #     export BRANCH="${GITHUB_HEAD_REF}"
    #     export TOBRANCH="${GITHUB_BASE_REF}"
    #     export IMAGE_TAG="${TOBRANCH}-${COMMIT_HASH}"
    #     echo "Image tag: ${IMAGE_TAG}"
    #     make clean_image
    # - name: Clean binary images
    #   shell: bash
    #   env:
    #     GITHUB_CONTEXT: ${{ toJSON(github) }}
    #   run: |
    #     COMMIT_HASH=$(echo ${GITHUB_CONTEXT} | jq '.event.pull_request.head.sha')
    #     if [ "${COMMIT_HASH}" == "null" ]; then
    #       export COMMIT_HASH="${GITHUB_SHA}"
    #     else
    #       export COMMIT_HASH=${COMMIT_HASH}
    #     fi
    #     export BRANCH="${GITHUB_HEAD_REF}"
    #     export TOBRANCH="${GITHUB_BASE_REF}"
    #     export IMAGE_TAG="${TOBRANCH}-${COMMIT_HASH}"
    #     echo "Image tag: ${IMAGE_TAG}"
    #     make clean_binary_dockerhub
    # - name: Clean garbage
    #   shell: bash
    #   run: |
    #     rm -rf /tmp/*>/dev/null 2>&1 || true
